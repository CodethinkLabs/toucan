Set up a board
--------------

    IMPLEMENTS GIVEN a toucan board

    cat <<-EOF > "$DATADIR/setup.yaml"
    name: example.board
    schema: org.consonant-project.toucan.schema.0
    info:
        name: Example board
        description: This is an example board
    lanes:
      - name: Backlog
        description: Backlog lane
      - name: Doing
        description: Doing lane
      - name: Review
        description: Review lane
      - name: Done
        description: Done lane
    views:
      - name: Default
        description: Default view
        lanes:
          - Backlog
          - Doing
          - Review
          - Done
      - name: Secondary
        description: Secondary view
        lanes:
          - Backlog
          - Doing
    users:
      - name: Test User
        email: test@test.org
        roles:
          - admin
    reasons:
      - short-name: testing
        name: A test reason for testing
    milestones:
      - short-name: testing
        name: A test milestone for testing
        deadline: 0000000000 +0000
    EOF

    run_toucan_cli <<-EOF
    setup "$DATADIR/setup.yaml" "$DATADIR/board"
    EOF

Set up a board with a card
--------------------------

    IMPLEMENTS GIVEN a toucan board with a card

    cat <<-EOF > "$DATADIR/setup.yaml"
    name: example.board
    schema: org.consonant-project.toucan.schema.0
    info:
        name: Example board
        description: This is an example board
    lanes:
      - name: Backlog
        description: Backlog lane
        cards:
          - 0
      - name: Doing
        description: Doing lane
      - name: Review
        description: Review lane
      - name: Done
        description: Done lane
    views:
      - name: Default
        description: Default view
        lanes:
          - Backlog
          - Doing
          - Review
          - Done
      - name: Secondary
        description: Secondary view
        lanes:
          - Backlog
          - Doing
    users:
      - name: Test User
        email: test@test.org
        roles:
          - admin
    reasons:
      - short-name: testing
        name: A test reason for testing
    milestones:
      - short-name: testing
        name: A test milestone for testing
        deadline: 0000000000 +0000
    cards:
      - id: 0
        title: Implement something
        creator: Test User
        lane: Backlog
        reason: testing
    EOF

    run_toucan_cli_no_exit <<-EOF
    setup "$DATADIR/setup.yaml" "$DATADIR/board"
    EOF
    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, 'card')
    objects = store.objects(commit, klass)
    import toucanlib
    name_gen = toucanlib.cli.names.NameGenerator()
    with open('card_id', 'w+') as f:
        f.write(name_gen.presentable_name(objects[0]))
    EOF

Create a temporary file
-----------------------

    IMPLEMENTS WHEN creating a temporary file

    touch $DATADIR/tmpobject

Set a property value
--------------------

    IMPLEMENTS WHEN setting the (.+) to "(.+)"

    run_python_test <<-EOF
    with open('tmpobject', 'a') as f:
        f.write('$MATCH_1: $MATCH_2\n')
    EOF

Set a list property value
-------------------------

    IMPLEMENTS WHEN setting the (.+) to a list: "(.+)"

    run_python_test <<-EOF
    list_items = '$MATCH_2'.split(', ')
    with open('tmpobject', 'a') as f:
        f.write('$MATCH_1:\n')
        for item in list_items:
            f.write('  - %s\n' % item)
    EOF

Set a card reference
--------------------

    IMPLEMENTS WHEN setting the card reference

    run_python_test <<-EOF
    with open('tmpobject', 'a') as f:
        with open('card_id', 'r') as c:
            f.write('card: %s\n' % c.read())
    EOF
    rm card_id

Run toucan add
--------------

    IMPLEMENTS WHEN running "toucan add ?(.*)"

    export EDITOR="$SRCDIR/tests/yarn/implementations/add.sh"
    run_toucan_cli <<-EOF
    add "$DATADIR/board" $MATCH_1
    EOF

Check the output for confirmation of an object
----------------------------------------------

    IMPLEMENTS THEN the output includes confirmation of a new (.+)

    grep "Added a $MATCH_1" "$DATADIR/stdout"

Check for an object in a board
------------------------------

    IMPLEMENTS THEN the board includes a (.+) with the (.+) "(.+)"

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, '$MATCH_1')
    objects = store.objects(commit, klass)
    assert len([o for o in objects if o.get('$MATCH_2', '') == '$MATCH_3']) > 0
    EOF
    cat <<-EOF > "$DATADIR/last_obj"
    $MATCH_1:$MATCH_2:$MATCH_3
    EOF

Check for object property
-------------------------

    IMPLEMENTS THEN the same object has the (.+) "(.+)"

    test_object_in_store <<-EOF
    property_value = yaml.load("$MATCH_2")
    assert obj.get('$MATCH_1', '') == property_value
    EOF

Check for timestamp property
----------------------------

    IMPLEMENTS THEN the same object has a timestamp representing the (.+): "(.+)"

    test_object_in_store <<-EOF
    property_value = yaml.load("$MATCH_2")
    assert obj.get('$MATCH_1', '').value.date() == property_value
    EOF

Check for object list property
------------------------------

    IMPLEMENTS THEN the same object has a list of (.+) containing "(.+)"

    test_object_in_store <<-EOF
    prop = obj.get('$MATCH_1', [])
    contents = [item.value for item in prop]
    property_value = yaml.load("$MATCH_2")
    assert property_value in contents
    EOF

Check for object property that is a reference
---------------------------------------------

    IMPLEMENTS THEN the same object has a reference to the (.+) with (.+) "(.+)"

    test_object_in_store <<-EOF
    ref = obj.get('$MATCH_1', '')
    if ref:
        ref_obj = store.resolve_reference(ref)
        assert ref_obj.get('$MATCH_2', '') == '$MATCH_3'
    EOF

Check for object property that is a list of references
------------------------------------------------------

    IMPLEMENTS THEN the same object has a list reference to the (.+) with (.+) "(.+)"

    test_object_in_store <<-EOF
    ref_list = obj.get('%ss' % '$MATCH_1', '')
    if ref_list:
        names = []
        for item in ref_list:
            ref = store.resolve_reference(item.value)
            print ref.properties
            names.append(ref.get("$MATCH_2", ''))
        assert '$MATCH_3' in names
    EOF

Check the length of a list property
-----------------------------------

    IMPLEMENTS THEN the same object has ([0-9]+) (.+)

    test_object_in_store <<-EOF
    assert len(obj.get('$MATCH_2', [])) == $MATCH_1
    EOF

Check if a user is an admin
---------------------------

    IMPLEMENTS THEN the same object is an admin

    test_object_in_store <<-EOF
    roles = obj.get('roles', [])
    assert 'admin' in roles
    EOF

Check that an object property does not exist
--------------------------------------------

    IMPLEMENTS THEN the same object has no (.+)

    test_object_in_store <<-EOF
    assert obj.get('$MATCH_1', None) == None
    EOF

Clean up any mess
-----------------

    IMPLEMENTS FINALLY clean up

    rm tmpobject

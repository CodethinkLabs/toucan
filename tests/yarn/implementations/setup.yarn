Set up new Toucan boards
========================

Create a setup file
-------------------

    IMPLEMENTS GIVEN a setup file

    touch $DATADIR/setup-file.yaml

Define the service name
---------------------

    IMPLEMENTS GIVEN a service name (.+) in the setup file

    cat <<-EOF >> $DATADIR/setup-file.yaml
    name: $MATCH_1
    EOF

Define the schema name
----------------------

    IMPLEMENTS GIVEN a schema name (.+) in the setup file

    cat <<-EOF >> $DATADIR/setup-file.yaml
    schema: $MATCH_1
    EOF

Define the board name
---------------------

    IMPLEMENTS GIVEN a board name (.+) in the setup file

    if ! grep "^info:" $DATADIR/setup-file.yaml 2>&1 >/dev/null; then
      cat <<-EOF >> $DATADIR/setup-file.yaml
    info:
    EOF
    fi
    cat <<-EOF >> $DATADIR/setup-file.yaml
      name: $MATCH_1
    EOF

Define the board description
----------------------------

    IMPLEMENTS GIVEN a board description (.+) in the setup file

    if ! grep "^info:" $DATADIR/setup-file.yaml 2>&1 >/dev/null; then
      cat <<-EOF >> $DATADIR/setup-file.yaml
    info:
    EOF
    fi
    cat <<-EOF >> $DATADIR/setup-file.yaml
      description: $MATCH_1
    EOF

Define views, lanes or users
----------------------------

    IMPLEMENTS GIVEN a list of ([a-z]+) in the setup file

    cat <<-EOF >> $DATADIR/setup-file.yaml
    $MATCH_1:
    EOF

Define a lane
-------------

    IMPLEMENTS GIVEN a lane (.+) with the description (.+) in the setup file

    cat <<-EOF >> $DATADIR/setup-file.yaml
      - name: $MATCH_1
        description: $MATCH_2
    EOF

    IMPLEMENTS GIVEN a lane without a name and with a description "(.+)" in the setup file

    cat <<-EOF >> $DATADIR/setup-file.yaml
      - description: $MATCH_1
    EOF

Define a view
-------------

    IMPLEMENTS GIVEN a view (.+) with the description (.+) in the setup file

    cat <<-EOF >> $DATADIR/setup-file.yaml
      - name: $MATCH_1
        description: $MATCH_2
    EOF

    IMPLEMENTS GIVEN a view without a name and with a description "(.+)" in the setup file

    cat <<-EOF >> $DATADIR/setup-file.yaml
      - description: $MATCH_1
    EOF

    IMPLEMENTS GIVEN a view "(.+)" without a description in the setup file

    cat <<-EOF >> $DATADIR/setup-file.yaml
      - name: $MATCH_1
    EOF

Define the lanes of a view
--------------------------

    IMPLEMENTS GIVEN a list of lanes in the view in the setup file

    cat <<-EOF >> $DATADIR/setup-file.yaml
        lanes:
    EOF

    IMPLEMENTS GIVEN this view includes the lane (.+) in the setup file

    cat <<-EOF >> $DATADIR/setup-file.yaml
          - $MATCH_1
    EOF

Define a user
-------------

    IMPLEMENTS GIVEN a user with the name (.+) in the setup file

    cat <<-EOF >> $DATADIR/setup-file.yaml
      - name: $MATCH_1
    EOF

    IMPLEMENTS GIVEN a user without a name and with an email address "(.+)"

    cat <<-EOF >> $DATADIR/setup-file.yaml
      - email: $MATCH_1
    EOF

Define the email address of a user
----------------------------------

    IMPLEMENTS GIVEN this user has the email address (.+) in the setup file

    cat <<-EOF >> $DATADIR/setup-file.yaml
        email: $MATCH_1
    EOF

Define the role of a user
-------------------------

    IMPLEMENTS GIVEN this user has the role "(.+)" in the setup file

    if ! grep "^    roles:" $DATADIR/setup-file.yaml 2>&1 >dev/null; then
      cat <<-EOF >> $DATADIR/setup-file.yaml
        roles:
    EOF
    fi
    cat <<-EOF >> $DATADIR/setup-file.yaml
          - $MATCH_1
    EOF

Run toucan setup
----------------

    IMPLEMENTS WHEN running "toucan setup"

    run_toucan_cli <<-EOF
    setup $DATADIR/setup-file.yaml $DATADIR/board
    EOF

Run toucan setup
----------------

    IMPLEMENTS WHEN running "toucan setup" against the invalid setup file

    run_toucan_cli <<-EOF || true
    setup $DATADIR/setup-file.yaml $DATADIR/board
    EOF

Check whether the working directory is a git repository
-------------------------------------------------------

    IMPLEMENTS THEN the board directory is a non-bare git repository

    test -d $DATADIR/board/.git 

Check whether the working directory has a given number of commits
-----------------------------------------------------------------

    IMPLEMENTS THEN the board repository has exactly ([0-9]+) commits? in "(.+)"

    cd $DATADIR/board
    COUNT=$(git log --format=oneline $MATCH_2 | wc -l | xargs echo -n)
    test $MATCH_1 -eq $COUNT

Check whether a board uses a given service name
-----------------------------------------------

    IMPLEMENTS THEN the board uses the service name "(.+)"

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    assert store.name(commit) == "$MATCH_1"
    EOF

Check whether a board uses a given schema name
----------------------------------------------

    IMPLEMENTS THEN the board uses the schema name "(.+)"

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    assert store.schema(commit).name == "$MATCH_1"
    EOF

Check whether a board has a given name
--------------------------------------

    IMPLEMENTS THEN the board has the name "(.+)"

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, 'info')
    infos = store.objects(commit, klass)
    assert len(infos) == 1
    assert infos[0].properties['name'].value == "$MATCH_1"
    EOF

Check whether a board has a given description
---------------------------------------------

    IMPLEMENTS THEN the board has the description "(.+)"

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, 'info')
    infos = store.objects(commit, klass)
    assert len(infos) == 1
    assert infos[0].properties['description'].value == "$MATCH_1"
    EOF

Check whether a board has a given number of lanes/views/users/etc.
------------------------------------------------------------------

    IMPLEMENTS THEN the board has exactly ([0-9]+) (lane|view|user)s?

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, "$MATCH_2")
    lanes = store.objects(commit, klass)
    assert len(lanes) == $MATCH_1
    EOF

Check whether a board has a lane with a given name
--------------------------------------------------

    IMPLEMENTS THEN the board has a lane "(.+)"

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, 'lane')
    lanes = store.objects(commit, klass)
    assert len([l for l in lanes if l.properties['name'].value == "$MATCH_1"]) > 0
    EOF

Check whether a lane has a specific description
-----------------------------------------------

    IMPLEMENTS THEN the lane "(.+)" has the description "(.+)"

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, 'lane')
    lanes = store.objects(commit, klass)
    lane = [l for l in lanes if l.properties['name'].value == "$MATCH_1"][0]
    assert 'description' in lane.properties
    assert lane.properties['description'].value == "$MATCH_2"
    EOF

Check whether a board has a view with a given name
--------------------------------------------------

    IMPLEMENTS THEN the board has a view "(.+)"

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, 'view')
    views = store.objects(commit, klass)
    assert len([v for v in views if v.properties['name'].value == "$MATCH_1"]) > 0
    EOF

Check whether a view has a specific description
-----------------------------------------------

    IMPLEMENTS THEN the view "(.+)" has the description "(.+)"

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, 'view')
    views = store.objects(commit, klass)
    view = [v for v in views if v.properties['name'].value == "$MATCH_1"][0]
    assert 'description' in view.properties
    assert view.properties['description'].value == "$MATCH_2"
    EOF

Check whether a view includes an exact given number of lanes
-------------------------------------------------------------

    IMPLEMENTS THEN the view "(.+)" includes exactly ([0-9]+) lanes

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, 'view')
    views = store.objects(commit, klass)
    view = [v for v in views if v.properties['name'].value == "$MATCH_1"][0]
    assert 'lanes' in view.properties
    assert len(view.properties['lanes'].value) == $MATCH_2
    EOF

Check whether a view includes a lane with a given name
------------------------------------------------------

    IMPLEMENTS THEN the view "(.+)" includes the lane "(.+)"

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head

    klass = store.klass(commit, 'view')
    views = store.objects(commit, klass)
    view = [v for v in views if v.properties['name'].value == "$MATCH_1"][0]

    lane_klass = store.klass(commit, 'lane')
    lanes = store.objects(commit, lane_klass)

    matches = []
    for reference in view.properties['lanes'].value:
        print reference
        print reference.value
        matches.extend(l for l in lanes if l.uuid == reference.value['uuid'])
    assert len(matches) > 0
    EOF

Check whether a board has a user with a given name
--------------------------------------------------

    IMPLEMENTS THEN the board has a user named "(.+)"

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, 'user')
    users = store.objects(commit, klass)
    assert len([u for u in users if u.properties['name'].value == "$MATCH_1"]) > 0
    EOF

Check whether a user has a specific email address
-------------------------------------------------

    IMPLEMENTS THEN the user "(.+)" has the email address "(.+)"

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, 'user')
    users = store.objects(commit, klass)

    user = [u for u in users if u.properties['name'].value == "$MATCH_1"][0]
    assert 'email' in user.properties
    assert user.properties['email'].value == "$MATCH_2"
    EOF

Check whether a user has an exact number of roles
-------------------------------------------------

    IMPLEMENTS THEN the user "(.+)" has exactly ([0-9]+) roles?

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, 'user')
    users = store.objects(commit, klass)

    user = [u for u in users if u.properties['name'].value == "$MATCH_1"][0]
    assert 'roles' in user.properties
    assert len(user.properties['roles'].value) == $MATCH_2
    EOF

Check whether a user has a given role
-------------------------------------

    IMPLEMENTS THEN the user "(.+)" has the role "(.+)"

    run_consonant_store_test <<-EOF
    commit = store.ref('master').head
    klass = store.klass(commit, 'user')
    users = store.objects(commit, klass)

    user = [u for u in users if u.properties['name'].value == "$MATCH_1"][0]
    print yaml.dump(user)
    assert 'roles' in user.properties
    assert "$MATCH_2" in \
        [role.value for role in user.properties['roles'].value]
    EOF

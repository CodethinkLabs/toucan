Show information about objects in toucan boards
===============================================

Set up a board
--------------

    IMPLEMENTS GIVEN a populated toucan board

    cat <<-EOF > "$DATADIR/setup.yaml"
    name: example.board
    schema: org.consonant-project.toucan.schema.0
    info:
        name: Example board
        description: This is an example board
    lanes:
      - name: Backlog
        description: Backlog lane
        views:
          - Default
          - Secondary
        cards:
          - 0
          - 1
          - 2
      - name: Doing
        description: Doing lane
        views:
          - Default
          - Secondary
      - name: Review
        description: Review lane
        views:
          - Default
      - name: Done
        description: Done lane
        views:
          - Default
    views:
      - name: Default
        description: Default view
        lanes:
          - Backlog
          - Doing
          - Review
          - Done
      - name: Secondary
        description: Secondary view
        lanes:
          - Backlog
          - Doing
    users:
      - name: Test User
        email: test@test.org
        roles:
          - admin
        default-view: Default
        avatar: avatars.test.org/test
    reasons:
      - short-name: xyz
        name: xyz - implementation of foo.
        description: >
          This is the description of reason/xyz.
    milestones:
      - short-name: xyz
        name: xyz - foo implemented.
        description: >
          This milestone marks when foo should be implemented by.
        deadline: 0000000000 +0000
    cards:
      - id: 0
        title: Implement x for foo
        description: >
          Implementation detail of x for the feature named foo.
        creator: Test User
        lane: Backlog
        reason: xyz
        milestone: xyz
        assignees:
          - Test User
        comments:
          - 0
      - id: 1
        title: Implement y for foo
        description: >
          Implementation detail of y for the feature named foo.
        creator: Test User
        lane: Backlog
        reason: xyz
        milestone: xyz
      - id: 2
        title: Implement z for foo
        description: >
          Implementation detail of z for the feature named foo.
        creator: Test User
        lane: Backlog
        reason: xyz
        milestone: xyz
    comments:
      - card: 0
        comment: I will do this!
        author: Test User
        attachment: example.png
        id: 0
    attachments:
      - name: example.png
        comment: 0
    EOF

    run_toucan_cli <<-EOF
    setup "$DATADIR/setup.yaml" "$DATADIR/board"
    EOF

Set up a board without cards
----------------------------

    IMPLEMENTS GIVEN a toucan board with no cards

    cat <<-EOF > "$DATADIR/setup.yaml"
    name: example.board
    schema: org.consonant-project.toucan.schema.0
    info:
        name: Example board
        description: This is an example board
    lanes:
      - name: Backlog
        description: Backlog lane
      - name: Doing
        description: Doing lane
      - name: Review
        description: Review lane
      - name: Done
        description: Done lane
    views:
      - name: Default
        description: Default view
        lanes:
          - Backlog
          - Doing
          - Review
          - Done
      - name: Secondary
        description: Secondary view
        lanes:
          - Backlog
          - Doing
    users:
      - name: Test User
        email: test@test.org
        roles:
          - admin
    EOF

    run_toucan_cli <<-EOF
    setup "$DATADIR/setup.yaml" "$DATADIR/board"
    EOF

Run toucan show
---------------

    IMPLEMENTS WHEN running "toucan show ?(.*)"

    run_toucan_cli <<-EOF
    show "$DATADIR/board" $MATCH_1
    EOF

Check for the number of objects in the output
---------------------------------------------

    IMPLEMENTS THEN the output inculdes exactly ([0-9]+) objects

    check_object <<-EOF
    assert len(data) == $MATCH_1
    EOF

Check the value of a property in the output
-------------------------------------------

    IMPLEMENTS THEN object ([0-9]+) has the (.+) "(.+)"

    check_object <<-EOF
    property_value = yaml.load(env.get("MATCH_3"))
    assert data[$MATCH_1 - 1]['$MATCH_2'] == property_value
    EOF

Check the order of properties in the output
-------------------------------------------

    IMPLEMENTS THEN object ([0-9]+) has properties in order "(.+)"

    check_object <<-EOF
    assert data[$MATCH_1 - 1].keys() == $MATCH_2
    EOF

Check the length of a list property
-----------------------------------

    IMPLEMENTS THEN object ([0-9]+) has a list "(.+)" with ([0-9]+) elements

    check_object <<-EOF
    assert len(data[$MATCH_1 - 1]['$MATCH_2']) == $MATCH_3
    EOF

Check the existence of a reference number
-----------------------------------------

    IMPLEMENTS THEN object ([0-9]+) has a (.+) reference

    check_object <<-EOF
    assert '$MATCH_2' in data[$MATCH_1 - 1]
    EOF

Check the existence of an identifying number
--------------------------------------------

    IMPLEMENTS THEN object ([0-9]+) has an identifying number

    check_object <<-EOF
    assert 'number' in data[$MATCH_1 - 1]
    EOF

Check the error output
----------------------

    IMPLEMENTS THEN the output includes the phrase (.+)

    grep "$MATCH_1" "$DATADIR/stdout"
